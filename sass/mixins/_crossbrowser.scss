/// Adds a browser prefix to the property
/// @param {*} $property Property
/// @param {*} $value Value

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

/// Opacity
/// @param {Double} $opacity [0.5] - Opacity
/// @require {mixin} css3-prefix

@mixin opacity($opacity: 0.5) {
  $opacityMultiplied: ($opacity * 100);

  filter: alpha(opacity=$opacityMultiplied);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
  @include css3-prefix('opacity', $opacity);
}

/**
* Rem is similar to the em value, but instead of being relative to the parent element it’srelative to the font-size set in the <html>.
* It has all the benefits of em but you don’t get issues with e.g (compounding) since rem is only relative to the html element.
* The bad part is there’s no support for rem units in IE8 and below.
* But with this mixin we can create a fallback to pixels when rem isn’t supported.
*/
@function calculateRem($size) {
  $remSize: $size / 14px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: calculateRem($size);
}

/**
* Clearfix, with IE6 support.
*/
%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

/**
* Black and white with opacity
*/
@function black($opacity) {
  @return rgba(0, 0, 0, $opacity)
}

@function white($opacity) {
  @return rgba(255, 255, 255, $opacity)
}

/**
* Center-align a block level element
*/
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/**
* Absolute Positioned
*/
@mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

/**
* Background transparetn
*/
@mixin transparentBackgroundColor($color, $alpha) {
  background-color: rgba($color, $alpha);
}

@function transparentHexa($color, $alpha) {
  @return rgba($color, $alpha);
}

@mixin fullWidthMinusMarginPadding($marginSize,$paddingSize) {
  $minusValue: ($marginSize+$paddingSize)*2;
  padding: $paddingSize;
  margin: $marginSize;
  @include css3-prefix("width", "calc(100% - "+$minusValue+")");
}

@mixin center-children {
  display: flex;
  justify-content: center;
  align-items: center;
}